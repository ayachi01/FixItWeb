# Generated by Django 5.2.6 on 2025-09-18 15:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('role', models.CharField(choices=[('Student', 'Student'), ('Faculty', 'Faculty'), ('Admin Staff', 'Admin Staff'), ('Visitor', 'Visitor'), ('Janitorial Staff', 'Janitorial Staff'), ('Utility Worker', 'Utility Worker'), ('IT Support', 'IT Support'), ('Security Guard', 'Security Guard'), ('Maintenance Officer', 'Maintenance Officer'), ('Registrar', 'Registrar'), ('HR', 'HR'), ('University Admin', 'University Admin')], max_length=50)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('requires_admin_approval', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invites_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('User Created', 'User Created'), ('Role Assigned', 'Role Assigned'), ('Invite Created', 'Invite Created'), ('Invite Approved', 'Invite Approved'), ('Invite Rejected', 'Invite Rejected')], max_length=50)),
                ('details', models.TextField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
                ('target_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='targeted_audit_logs', to=settings.AUTH_USER_MODEL)),
                ('target_invite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.invite')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('building_name', models.CharField(max_length=100)),
                ('floor_number', models.CharField(max_length=50)),
                ('room_identifier', models.CharField(max_length=100)),
            ],
            options={
                'unique_together': {('building_name', 'floor_number', 'room_identifier')},
            },
        ),
        migrations.CreateModel(
            name='GuestReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_name', models.CharField(max_length=100)),
                ('guest_email', models.EmailField(max_length=254)),
                ('guest_contact', models.CharField(max_length=50)),
                ('tracking_code', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('Cleaning', 'Cleaning'), ('Plumbing', 'Plumbing'), ('Electrical', 'Electrical'), ('Structural', 'Structural'), ('HVAC', 'HVAC'), ('Technology', 'Technology'), ('Equipment', 'Equipment'), ('Disturbance', 'Disturbance'), ('Security', 'Security'), ('Parking', 'Parking')], max_length=50)),
                ('urgency', models.CharField(choices=[('Standard', 'Standard'), ('Urgent', 'Urgent')], default='Standard', max_length=50)),
                ('status', models.CharField(choices=[('Created', 'Created'), ('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Needs Assistance', 'Needs Assistance'), ('Resolved', 'Resolved'), ('Closed', 'Closed')], default='Created', max_length=20)),
                ('escalation_level', models.CharField(choices=[('None', 'None'), ('Secondary', 'Secondary'), ('Admin', 'Admin')], default='None', max_length=20)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='guest_reports/')),
                ('accepted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='guest_assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.location')),
            ],
        ),
        migrations.CreateModel(
            name='StudentRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_code', models.CharField(max_length=6)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
                ('status', models.CharField(choices=[('Pending', 'Pending Verification'), ('Verified', 'Verified'), ('Expired', 'Expired')], default='Pending', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_registration', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('Cleaning', 'Cleaning'), ('Plumbing', 'Plumbing'), ('Electrical', 'Electrical'), ('Structural', 'Structural'), ('HVAC', 'HVAC'), ('Technology', 'Technology'), ('Equipment', 'Equipment'), ('Disturbance', 'Disturbance'), ('Security', 'Security'), ('Parking', 'Parking')], max_length=50)),
                ('urgency', models.CharField(choices=[('Standard', 'Standard'), ('Urgent', 'Urgent')], default='Standard', max_length=50)),
                ('status', models.CharField(choices=[('Created', 'Created'), ('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Needs Assistance', 'Needs Assistance'), ('Resolved', 'Resolved'), ('Closed', 'Closed'), ('Reopened', 'Reopened')], default='Created', max_length=20)),
                ('escalation_level', models.CharField(choices=[('None', 'None'), ('Secondary', 'Secondary'), ('Admin', 'Admin')], default='None', max_length=20)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accepted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accepted_tickets', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='core.location')),
                ('reporter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_tickets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('guest_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.guestreport')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='TicketActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('Created', 'Created'), ('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Needs Assistance', 'Needs Assistance'), ('Resolved', 'Resolved'), ('Closed', 'Closed'), ('Reopened', 'Reopened'), ('Escalated', 'Escalated')], max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('guest_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.guestreport')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('Student', 'Student'), ('Faculty', 'Faculty'), ('Admin Staff', 'Admin Staff'), ('Visitor', 'Visitor'), ('Janitorial Staff', 'Janitorial Staff'), ('Utility Worker', 'Utility Worker'), ('IT Support', 'IT Support'), ('Security Guard', 'Security Guard'), ('Maintenance Officer', 'Maintenance Officer'), ('Registrar', 'Registrar'), ('HR', 'HR'), ('University Admin', 'University Admin')], max_length=50)),
                ('can_report', models.BooleanField(default=False)),
                ('can_fix', models.BooleanField(default=False)),
                ('can_assign', models.BooleanField(default=False)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_domain', models.CharField(blank=True, max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('course', models.CharField(blank=True, max_length=255, null=True)),
                ('year_level', models.PositiveIntegerField(blank=True, null=True)),
                ('student_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to='core.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='TicketImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.ImageField(upload_to='ticket_images/')),
                ('guest_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('guest_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.guestreport')),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.ticket')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('ticket__isnull', False), ('guest_report__isnull', False), _connector='OR'), name='ticketimage_must_have_ticket_or_guestreport')],
            },
        ),
        migrations.CreateModel(
            name='TicketResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proof_image', models.ImageField(upload_to='resolutions/')),
                ('resolution_note', models.TextField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('guest_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resolutions', to='core.guestreport')),
                ('resolved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resolutions', to='core.ticket')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('ticket__isnull', False), ('guest_report__isnull', False), _connector='OR'), name='ticketresolution_must_have_ticket_or_guestreport')],
            },
        ),
    ]
