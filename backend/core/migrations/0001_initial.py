# Generated by Django 5.2.5 on 2025-09-03 07:10

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', 'Student'), ('faculty', 'Faculty/Instructor'), ('administrative_staff', 'Administrative Staff'), ('visitor', 'Visitor/Guest'), ('janitorial_staff', 'Janitorial Staff'), ('utility_worker', 'Utility Worker/Technician'), ('it_support', 'IT Support'), ('security_guard', 'Security Guard'), ('maintenance_officer', 'Maintenance Officer'), ('admin_registrar_hr', 'Admin/Registrar/HR'), ('university_admin', 'University Admin')], default='student', max_length=20)),
                ('university_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('accessibility_needs', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('campus', models.CharField(default='Dagupan Campus', max_length=100)),
                ('latitude', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['campus'], name='core_buildi_campus_9c6581_idx')],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('room', models.CharField(blank=True, max_length=50, null=True)),
                ('category', models.CharField(choices=[('plumbing', 'Plumbing'), ('electrical', 'Electrical'), ('structural', 'Structural'), ('equipment', 'Equipment'), ('cleaning', 'Cleaning'), ('hvac', 'HVAC'), ('parking', 'Parking'), ('disturbance', 'Disturbance'), ('tech', 'Tech'), ('security', 'Security'), ('other', 'Other')], default='other', max_length=50)),
                ('ai_suggested_category', models.CharField(blank=True, choices=[('plumbing', 'Plumbing'), ('electrical', 'Electrical'), ('structural', 'Structural'), ('equipment', 'Equipment'), ('cleaning', 'Cleaning'), ('hvac', 'HVAC'), ('parking', 'Parking'), ('disturbance', 'Disturbance'), ('tech', 'Tech'), ('security', 'Security'), ('other', 'Other')], max_length=50, null=True)),
                ('urgency', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='low', max_length=20)),
                ('ai_suggested_urgency', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=20, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='tickets/%Y/%m/%d/')),
                ('resolution_photo', models.ImageField(blank=True, null=True, upload_to='resolution_photos/%Y/%m/%d/')),
                ('status', models.CharField(choices=[('open', 'Open'), ('accepted', 'Accepted'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_sentiment_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets_assigned', to=settings.AUTH_USER_MODEL)),
                ('building', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to='core.building')),
                ('related_tickets', models.ManyToManyField(blank=True, related_name='duplicates', to='core.ticket')),
                ('reporter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets_reported', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('status_update', 'Status Update'), ('assignment', 'Assignment'), ('comment', 'Comment'), ('urgent', 'Urgent Alert')], default='status_update', max_length=20)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('delivery_method', models.CharField(choices=[('push', 'Push'), ('email', 'Email')], default='push', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.ticket')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_message', models.TextField()),
                ('bot_response', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chat_logs', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chat_logs', to='core.ticket')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='core_user_role_73872d_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['university_id'], name='core_user_univers_7646f9_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['status', 'urgency'], name='core_ticket_status_c8db4c_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['building', 'category'], name='core_ticket_buildin_fb2ddf_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['assigned_to', 'status'], name='core_ticket_assigne_833ed1_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['reporter', 'status'], name='core_ticket_reporte_4a1c7d_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['category', 'status'], name='core_ticket_categor_ef4901_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read'], name='core_notifi_user_id_cb8f07_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['ticket', 'notification_type'], name='core_notifi_ticket__4a8c97_idx'),
        ),
        migrations.AddIndex(
            model_name='chatlog',
            index=models.Index(fields=['user', 'created_at'], name='core_chatlo_user_id_24748f_idx'),
        ),
        migrations.AddIndex(
            model_name='chatlog',
            index=models.Index(fields=['ticket', 'created_at'], name='core_chatlo_ticket__b01012_idx'),
        ),
    ]
