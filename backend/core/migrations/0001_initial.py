# Generated by Django 5.2.6 on 2025-09-26 01:39

import core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True)),
                ('otp_hash', models.CharField(blank=True, max_length=128, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('token', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('role', models.CharField(choices=[('Student', 'Student'), ('Faculty', 'Faculty'), ('Admin Staff', 'Admin Staff'), ('Visitor', 'Visitor'), ('Janitorial Staff', 'Janitorial Staff'), ('Utility Worker', 'Utility Worker'), ('IT Support', 'IT Support'), ('Security Guard', 'Security Guard'), ('Maintenance Officer', 'Maintenance Officer'), ('Registrar', 'Registrar'), ('HR', 'HR'), ('University Admin', 'University Admin')], max_length=50)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_used', models.BooleanField(default=False)),
                ('requires_admin_approval', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_invites', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invites_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('building_name', models.CharField(max_length=100)),
                ('floor_number', models.CharField(max_length=50)),
                ('room_identifier', models.CharField(max_length=100)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('building_name', 'floor_number', 'room_identifier'), name='unique_location')],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, db_index=True, max_length=6)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('is_used', models.BooleanField(db_index=True, default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_codes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('Cleaning', 'Cleaning'), ('Plumbing', 'Plumbing'), ('Electrical', 'Electrical'), ('Structural', 'Structural'), ('HVAC', 'HVAC'), ('Technology', 'Technology'), ('Equipment', 'Equipment'), ('Disturbance', 'Disturbance'), ('Security', 'Security'), ('Parking', 'Parking')], db_index=True, max_length=50)),
                ('urgency', models.CharField(choices=[('Standard', 'Standard'), ('Urgent', 'Urgent')], db_index=True, default='Standard', max_length=50)),
                ('status', models.CharField(choices=[('Created', 'Created'), ('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Needs Assistance', 'Needs Assistance'), ('Resolved', 'Resolved'), ('Closed', 'Closed'), ('Reopened', 'Reopened')], db_index=True, default='Created', max_length=20)),
                ('escalation_level', models.CharField(choices=[('None', 'None'), ('Secondary', 'Secondary'), ('Admin', 'Admin')], db_index=True, default='None', max_length=20)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='core.location')),
                ('reporter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_tickets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('User Created', 'User Created'), ('User Profile Created', 'User Profile Created'), ('Role Assigned', 'Role Assigned'), ('OTP Verified', 'OTP Verified'), ('OTP Resent', 'OTP Resent'), ('Invite Created', 'Invite Created'), ('Invite Accepted', 'Invite Accepted'), ('Invite Approved', 'Invite Approved'), ('Invite Rejected', 'Invite Rejected'), ('Password Reset Requested', 'Password Reset Requested'), ('Password Reset Confirmed', 'Password Reset Confirmed'), ('Login', 'Login'), ('Logout', 'Logout'), ('Login Failed', 'Login Failed'), ('Token Refreshed', 'Token Refreshed'), ('Ticket Created', 'Ticket Created'), ('Ticket Updated', 'Ticket Updated'), ('Ticket Assigned', 'Ticket Assigned'), ('Ticket Unassigned', 'Ticket Unassigned'), ('Ticket Accepted', 'Ticket Accepted'), ('Ticket Resolved', 'Ticket Resolved'), ('Ticket Closed', 'Ticket Closed'), ('Ticket Reopened', 'Ticket Reopened'), ('Ticket Escalated', 'Ticket Escalated')], db_index=True, max_length=50)),
                ('details', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('performed_by', models.ForeignKey(help_text='The user who performed the action (may be null for system actions)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
                ('target_user', models.ForeignKey(blank=True, help_text='The user who was the subject of the action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='targeted_audit_logs', to=settings.AUTH_USER_MODEL)),
                ('target_invite', models.ForeignKey(blank=True, help_text='If the action was related to an invite', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.invite')),
                ('target_ticket', models.ForeignKey(blank=True, help_text='If the action was related to a ticket', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to='core.ticket')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TicketAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('accepted', models.BooleanField(default=False)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='core.ticket')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_assignments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='ticket',
            name='assignees',
            field=models.ManyToManyField(related_name='assigned_tickets', through='core.TicketAssignment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TicketImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.ImageField(upload_to='ticket_images/')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.ticket')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TicketResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proof_image', models.ImageField(blank=True, null=True, upload_to='resolutions/', validators=[core.validators.validate_file_size, core.validators.validate_image_extension])),
                ('resolution_note', models.TextField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('resolved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resolutions', to='core.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, choices=[('Student', 'Student'), ('Faculty', 'Faculty'), ('Admin Staff', 'Admin Staff'), ('Visitor', 'Visitor'), ('Janitorial Staff', 'Janitorial Staff'), ('Utility Worker', 'Utility Worker'), ('IT Support', 'IT Support'), ('Security Guard', 'Security Guard'), ('Maintenance Officer', 'Maintenance Officer'), ('Registrar', 'Registrar'), ('HR', 'HR'), ('University Admin', 'University Admin')], db_index=True, max_length=50)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_domain', models.CharField(blank=True, max_length=100)),
                ('created_by_admin', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('course', models.CharField(blank=True, max_length=255, null=True)),
                ('year_level', models.PositiveIntegerField(blank=True, null=True)),
                ('student_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to='core.userprofile')),
            ],
        ),
        migrations.AddConstraint(
            model_name='invite',
            constraint=models.UniqueConstraint(fields=('email', 'is_used'), name='unique_active_invite_per_email'),
        ),
        migrations.AddConstraint(
            model_name='passwordresetcode',
            constraint=models.UniqueConstraint(condition=models.Q(('is_used', False)), fields=('user', 'is_used'), name='unique_active_reset_code_per_user'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action'], name='core_auditl_action_d9fb24_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['timestamp'], name='core_auditl_timesta_80074f_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['target_ticket'], name='core_auditl_target__e3061b_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['target_user'], name='core_auditl_target__bd5329_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['target_invite'], name='core_auditl_target__a3d04b_idx'),
        ),
        migrations.AddConstraint(
            model_name='ticketassignment',
            constraint=models.UniqueConstraint(fields=('ticket', 'user'), name='unique_ticket_assignment'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['status'], name='core_ticket_status_f5a85f_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['category'], name='core_ticket_categor_fca1b2_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['created_at'], name='core_ticket_created_fe6f19_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['urgency'], name='core_ticket_urgency_63f634_idx'),
        ),
        migrations.AddConstraint(
            model_name='ticket',
            constraint=models.CheckConstraint(condition=models.Q(('description', ''), _negated=True), name='ticket_description_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='ticketresolution',
            constraint=models.CheckConstraint(condition=models.Q(('resolution_note', ''), _negated=True), name='resolution_note_not_empty'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['role'], name='core_userpr_role_ce56eb_idx'),
        ),
    ]
